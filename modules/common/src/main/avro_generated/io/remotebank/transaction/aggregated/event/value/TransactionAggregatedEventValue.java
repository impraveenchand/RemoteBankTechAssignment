/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.remotebank.transaction.aggregated.event.value;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransactionAggregatedEventValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9208121238910336551L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionAggregatedEventValue\",\"namespace\":\"io.remotebank.transaction.aggregated.event.value\",\"fields\":[{\"name\":\"user_id\",\"type\":\"int\"},{\"name\":\"total_transactions_count\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionAggregatedEventValue> ENCODER =
      new BinaryMessageEncoder<TransactionAggregatedEventValue>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionAggregatedEventValue> DECODER =
      new BinaryMessageDecoder<TransactionAggregatedEventValue>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TransactionAggregatedEventValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TransactionAggregatedEventValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionAggregatedEventValue>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TransactionAggregatedEventValue to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TransactionAggregatedEventValue from a ByteBuffer. */
  public static TransactionAggregatedEventValue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int user_id;
  @Deprecated public int total_transactions_count;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionAggregatedEventValue() {}

  /**
   * All-args constructor.
   * @param user_id The new value for user_id
   * @param total_transactions_count The new value for total_transactions_count
   */
  public TransactionAggregatedEventValue(java.lang.Integer user_id, java.lang.Integer total_transactions_count) {
    this.user_id = user_id;
    this.total_transactions_count = total_transactions_count;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user_id;
    case 1: return total_transactions_count;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user_id = (java.lang.Integer)value$; break;
    case 1: total_transactions_count = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.Integer getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.Integer value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'total_transactions_count' field.
   * @return The value of the 'total_transactions_count' field.
   */
  public java.lang.Integer getTotalTransactionsCount() {
    return total_transactions_count;
  }

  /**
   * Sets the value of the 'total_transactions_count' field.
   * @param value the value to set.
   */
  public void setTotalTransactionsCount(java.lang.Integer value) {
    this.total_transactions_count = value;
  }

  /**
   * Creates a new TransactionAggregatedEventValue RecordBuilder.
   * @return A new TransactionAggregatedEventValue RecordBuilder
   */
  public static io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder newBuilder() {
    return new io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder();
  }

  /**
   * Creates a new TransactionAggregatedEventValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionAggregatedEventValue RecordBuilder
   */
  public static io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder newBuilder(io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder other) {
    return new io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder(other);
  }

  /**
   * Creates a new TransactionAggregatedEventValue RecordBuilder by copying an existing TransactionAggregatedEventValue instance.
   * @param other The existing instance to copy.
   * @return A new TransactionAggregatedEventValue RecordBuilder
   */
  public static io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder newBuilder(io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue other) {
    return new io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder(other);
  }

  /**
   * RecordBuilder for TransactionAggregatedEventValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionAggregatedEventValue>
    implements org.apache.avro.data.RecordBuilder<TransactionAggregatedEventValue> {

    private int user_id;
    private int total_transactions_count;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total_transactions_count)) {
        this.total_transactions_count = data().deepCopy(fields()[1].schema(), other.total_transactions_count);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionAggregatedEventValue instance
     * @param other The existing instance to copy.
     */
    private Builder(io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total_transactions_count)) {
        this.total_transactions_count = data().deepCopy(fields()[1].schema(), other.total_transactions_count);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.Integer getUserId() {
      return user_id;
    }

    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder setUserId(int value) {
      validate(fields()[0], value);
      this.user_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_transactions_count' field.
      * @return The value.
      */
    public java.lang.Integer getTotalTransactionsCount() {
      return total_transactions_count;
    }

    /**
      * Sets the value of the 'total_transactions_count' field.
      * @param value The value of 'total_transactions_count'.
      * @return This builder.
      */
    public io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder setTotalTransactionsCount(int value) {
      validate(fields()[1], value);
      this.total_transactions_count = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'total_transactions_count' field has been set.
      * @return True if the 'total_transactions_count' field has been set, false otherwise.
      */
    public boolean hasTotalTransactionsCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'total_transactions_count' field.
      * @return This builder.
      */
    public io.remotebank.transaction.aggregated.event.value.TransactionAggregatedEventValue.Builder clearTotalTransactionsCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionAggregatedEventValue build() {
      try {
        TransactionAggregatedEventValue record = new TransactionAggregatedEventValue();
        record.user_id = fieldSetFlags()[0] ? this.user_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.total_transactions_count = fieldSetFlags()[1] ? this.total_transactions_count : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionAggregatedEventValue>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionAggregatedEventValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionAggregatedEventValue>
    READER$ = (org.apache.avro.io.DatumReader<TransactionAggregatedEventValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
